#include <Adafruit_SSD1306.h>
#include <U8g2lib.h>
#include <Wire.h>

Adafruit_SSD1306 display(128, 64, &Wire, 4);
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

static const unsigned char image_AD_bits[] = {0x04,0x04,0x04,0x04,0x15,0x0e,0x04};
static const unsigned char image_AU_bits[] = {0x04,0x0e,0x15,0x04,0x04,0x04,0x04};
static const unsigned char image_BUTTON_BD_bits[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x31,0x00,0x02,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9b,0x21,0x51,0x66,0x60,0x60,0x76,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x31,0x35,0x13,0x50,0x25,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x51,0x45,0x12,0x50,0x25,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x31,0x36,0x67,0x60,0x46,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x9b,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f};
static const unsigned char image_BUTTON_I_bits[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x71,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x93,0x21,0x21,0x23,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x21,0x21,0x75,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x21,0x21,0x25,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x21,0x71,0x25,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbb,0x21,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f};
static const unsigned char image_BUTTON_OT_bits[] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x21,0x32,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x93,0x21,0x51,0x20,0x70,0x52,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x51,0x23,0x20,0x75,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x51,0x22,0x20,0x53,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x21,0x21,0x77,0x40,0x56,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x93,0x21,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f};
static const unsigned char image_CHECK_bits[] = {0x00,0x00,0x20,0x31,0x1b,0x0e,0x04,0x00};

const unsigned char* bitmap_btn_codes[3] = {
  image_BUTTON_I_bits,
  image_BUTTON_BD_bits,
  image_BUTTON_OT_bits
};

const int NUM_ITEMS = 3;

// Button pins
const int BUTTON_UP = 18;    // Previous item (UP)
const int BUTTON_DOWN = 19;  // Next item (DOWN)

// Button state variables
bool button_up_pressed = false;
bool button_down_pressed = false;
unsigned long last_button_time = 0;
const unsigned long DEBOUNCE_DELAY = 200; // 200ms debounce

int item_selected = 0;
int prev_item;
int next_item;

void setup() {
  Serial.begin(115200);
  
  u8g2.begin();
  u8g2.setColorIndex(1);
  
  // Setup button pins with internal pull-up resistors
  pinMode(BUTTON_UP, INPUT_PULLUP);
  pinMode(BUTTON_DOWN, INPUT_PULLUP);
  
  Serial.println("Menu System Ready!");
  Serial.println("Button UP: GPIO18, Button DOWN: GPIO19");
}

void handleButtons() {
  unsigned long current_time = millis();
  
  // Check if enough time has passed since last button press (debouncing)
  if (current_time - last_button_time > DEBOUNCE_DELAY) {
    
    // Check UP button (Previous item)
    if (digitalRead(BUTTON_UP) == LOW && !button_up_pressed) {
      button_up_pressed = true;
      item_selected = (item_selected - 1 + NUM_ITEMS) % NUM_ITEMS;
      last_button_time = current_time;
      Serial.print("UP pressed - Item selected: ");
      Serial.println(item_selected);
    }
    else if (digitalRead(BUTTON_UP) == HIGH) {
      button_up_pressed = false;
    }
    
    // Check DOWN button (Next item)
    if (digitalRead(BUTTON_DOWN) == LOW && !button_down_pressed) {
      button_down_pressed = true;
      item_selected = (item_selected + 1) % NUM_ITEMS;
      last_button_time = current_time;
      Serial.print("DOWN pressed - Item selected: ");
      Serial.println(item_selected);
    }
    else if (digitalRead(BUTTON_DOWN) == HIGH) {
      button_down_pressed = false;
    }
  }
}

void loop() {
  // Handle button input
  handleButtons();
  
  // Calculate prev and next items with proper 0-based indexing
  prev_item = (item_selected - 1 + NUM_ITEMS) % NUM_ITEMS;
  next_item = (item_selected + 1) % NUM_ITEMS;
  
  // Draw background
  u8g2.clearBuffer();
  u8g2.setFontMode(1);
  u8g2.setBitmapMode(1);
  
  // Title
  u8g2.setFont(u8g2_font_4x6_tr);
  u8g2.drawStr(5, 9, "Menu");

  // Navigation arrows
  u8g2.drawXBM(119, 12, 5, 7, image_AU_bits);
  u8g2.drawXBM(119, 52, 5, 7, image_AD_bits);

  // Draw checkmark
  u8g2.drawXBM(92, 31, 6, 8, image_CHECK_bits);

  // Draw menu items
  u8g2.drawXBM(5, 12, 110, 13, bitmap_btn_codes[prev_item]);
  u8g2.drawXBM(5, 29, 110, 13, bitmap_btn_codes[item_selected]);
  u8g2.drawXBM(5, 46, 110, 13, bitmap_btn_codes[next_item]);

  u8g2.sendBuffer();

  // Small delay to prevent excessive CPU usage
  delay(50);
}